package co.kepler.commandshop;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.UUID;

import org.bukkit.Material;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.event.Listener;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import net.md_5.bungee.api.ChatColor;

public class Shop implements Listener {
	private final HashMap<String, UUID> playerIDs; // <Name, UUID>
	private final HashMap<UUID, ShopPlayer> players; // <UUID, ShopPlayer>
	private final HashMap<Integer, ShopEntry> shopEntries; // <ID, Entry>
	private final File dataFile; // Data.yml - holds all shop data

	private int nextShopID = 0;

	public Shop() {
		playerIDs = new HashMap<String, UUID>();
		players = new HashMap<UUID, ShopPlayer>();
		shopEntries = new HashMap<Integer, ShopEntry>();
		dataFile = new File(CommandShop.get().getDataFolder(), "data.yml");
	}

	public void load() {
		if (!dataFile.exists()) return;
		CommandShop.info("Loading shop data");
		YamlConfiguration dataConfig = YamlConfiguration.loadConfiguration(dataFile);

		// Load next Shop ID
		nextShopID = dataConfig.getInt("nextShopID");

		// Load Player ID's
		playerIDs.clear();
		ConfigurationSection idSection = dataConfig.getConfigurationSection("playerIDs");
		for (String key : idSection.getKeys(false)) {
			playerIDs.put(key, UUID.fromString(idSection.getString(key)));
		}

		// Load player data
		ConfigurationSection playerSection = dataConfig.getConfigurationSection("playerData");
		for (String id : playerSection.getKeys(false)) {
			String name = playerSection.getString(id + ".name");
			Set<Integer> shops = new HashSet<Integer>(playerSection.getIntegerList(id + ".shops"));
			double bank = playerSection.getDouble(id + ".bank");
			UUID uuid = UUID.fromString(id);
			ShopPlayer player = new ShopPlayer(name, uuid, shops, bank); 
			players.put(uuid, player);
		}

		// Load shop entries
		shopEntries.clear();
		ConfigurationSection shopSection = dataConfig.getConfigurationSection("shopEntries");
		for (String key : shopSection.getKeys(false)) {
			ConfigurationSection cur = shopSection.getConfigurationSection(key);
			int id = Integer.parseInt(key);
			ShopPlayer owner = players.get(UUID.fromString(cur.getString("owner")));
			ShopItem shopItem = new ShopItem(cur.getItemStack("item"));

			ShopEntry entry = new ShopEntry(owner, shopItem, id);
			entry.stock = cur.getInt("stock");
			entry.money = cur.getDouble("money");
			entry.buyPrice = cur.getDouble("buyPrice");
			entry.sellPrice = cur.getDouble("sellPrice");
			if (entry.buyPrice == 0) entry.buyPrice = null;
			if (entry.sellPrice == 0) entry.sellPrice = null;
			shopEntries.put(id, entry);
		}
	}

	public void save() {
		CommandShop.info("Saving shop data");
		YamlConfiguration config = new YamlConfiguration();
		config.options().header("Do not edit this file. This is for use by the plugin only!");

		// Save next Shop ID
		config.set("nextShopID", nextShopID);


		// Save player ID's
		ConfigurationSection ids = config.createSection("playerIDs");
		for (String name : playerIDs.keySet()) {
			ids.set(name, playerIDs.get(name).toString());
		}

		// Save player data
		ConfigurationSection playerData = config.createSection("playerData");
		for (UUID uuid : players.keySet()) {
			ShopPlayer player = players.get(uuid);
			String id = uuid.toString();
			playerData.set(id + ".name", player.name);
			playerData.set(id + ".bank", player.bank);
			playerData.set(id + ".shops", new ArrayList<Integer>(player.shops));
		}

		// Save shop entries
		ConfigurationSection shopSection = config.createSection("shopEntries");
		for (int id : shopEntries.keySet()) {
			ConfigurationSection cur = shopSection.createSection(Integer.toString(id));
			ShopEntry entry = shopEntries.get(id);
			cur.set("owner", entry.owner.uuid.toString());
			cur.set("item", entry.item.itemStack);
			cur.set("stock", entry.stock);
			cur.set("money", entry.money);
			cur.set("buyPrice", entry.buyPrice);
			cur.set("sellPrice", entry.sellPrice);
		}

		// Save to file
		try {
			config.save(dataFile);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public ShopEntry getShopEntry(int id) {
		return shopEntries.get(id);
	}

	public List<ShopEntry> getShopEntries() {
		List<ShopEntry> result = new ArrayList<ShopEntry>(shopEntries.values());
		Collections.sort(result);
		return result;
	}

	public UUID getPlayerID(String name) {
		// Return a player's UUID given their name
		return playerIDs.get(name.toLowerCase());
	}

	public ShopPlayer getPlayer(Player p) {
		UUID uuid = p.getUniqueId();
		String name = p.getName();
		ShopPlayer result = players.get(uuid);
		if (result == null) {
			result = new ShopPlayer(name, uuid, new HashSet<Integer>(),
					CommandShop.get().config.getStartingBalance());
			players.put(uuid, result);
			playerIDs.put(name.toLowerCase(), uuid);
		} else if (!result.name.equals(name)) {
			playerIDs.remove(result.name.toLowerCase());
			playerIDs.put(name.toLowerCase(), uuid);
			result.name = name;
		}
		return result;
	}

	public List<ShopEntry> getPlayerShops(Player p) {
		List<ShopEntry> result = new ArrayList<ShopEntry>();
		for (Integer i : getPlayer(p).shops) {
			result.add(shopEntries.get(i));
		}
		return result;
	}

	public List<String> getOwners(String... leadingExtras) {
		List<String> result = new ArrayList<String>();
		for (String s : leadingExtras) {
			result.add(s);
		}
		for (ShopPlayer p : players.values()) {
			result.add(p.name);
		}
		return result;
	}

	public ShopEntry createShop(Player owner, ItemStack is) {
		return createShop(owner, new ShopItem(is));
	}
	
	public ShopEntry createShop(Player owner, Material item, short data, String dataTag) {
		return createShop(owner, new ShopItem(item, data, dataTag));
	}
	
	private ShopEntry createShop(Player owner, ShopItem item) {
		if (item.getMaterial() == Material.AIR || CommandShop.get().config.isItemDisabled(item.getMaterial())) {
			owner.sendMessage(ChatColor.RED + "Shops with this item have been disallowed: " +
						Util.getItemDisplayName(item.getMaterial(), item.getData()));
			return null;
		}
		
		ShopPlayer shopPlayer = getPlayer(owner);

		for (Integer i : shopPlayer.shops) {
			ShopEntry curShop = shopEntries.get(i);
			if (item.equals(curShop.item)) {
				owner.sendMessage(ChatColor.RED + "You already own a shop with that item! (Shop ID: " + curShop.id + ")");
				return null;
			}
		}
		ShopEntry newShop = new ShopEntry(shopPlayer, item, nextShopID++);
		shopEntries.put(newShop.id, newShop);
		shopPlayer.shops.add(newShop.id);
		return newShop;
	}

	public void removeShop(Player owner, int id) {
		ShopEntry shop = this.getShopEntry(id);
		ShopPlayer player = getPlayer(owner);

		if (shop.stock > 0) {
			owner.sendMessage(ChatColor.RED + "You must clear out the stock before removing a shop!");
			return;
		}

		owner.sendMessage(ChatColor.GREEN + Util.priceToString(player.bank) + " was added to your bank!");
		player.bank += shop.money;
		shop.money = 0;
		player.shops.remove(id);
		shopEntries.remove(id);
	}

	public class ShopPlayer {
		public final UUID uuid;
		public String name;
		public final Set<Integer> shops;
		public double bank;

		private ShopPlayer(String name, UUID uuid, Set<Integer> shops, double bank) {
			this.name = name;
			this.uuid = uuid;
			this.shops = shops;
			this.bank = bank;
		}
	}

	public class ShopItem {
		private final ItemStack itemStack;
		public final ItemMeta itemMeta;
		
		public ShopItem(Material material, short data, String dataTag) {
			itemStack = Util.getItemStack(material, data, dataTag, 1);
			itemMeta = itemStack.getItemMeta();
		}

		public ShopItem(ItemStack is) {
			itemStack = is;
			itemMeta = is.getItemMeta();
		}

		public ItemStack getItemStack(int amount) {
			ItemStack result = itemStack.clone();
			result.setAmount(amount);
			return result;
		}

		public Material getMaterial() {
			return itemStack.getType();
		}
		
		public short getData() {
			return itemStack.getDurability();
		}
		
		public boolean equals(Object o) {
			if (o == null) return false;
			if (o instanceof ShopItem) {
				ShopItem compare = (ShopItem) o;
				return itemStack.isSimilar(compare.itemStack);
			}
			return false;
		}
	}

	public class ShopEntry implements Comparable<ShopEntry> {
		public final ShopPlayer owner;
		public final ShopItem item;
		public final int id;
		public int stock = 0;
		public double money = 0;
		public Double buyPrice = null;
		public Double sellPrice = null;

		public ShopEntry(ShopPlayer owner, ShopItem item, int id) {
			this.owner = owner;
			this.item = item;
			this.id = id;
		}

		@Override
		public int compareTo(ShopEntry entry) {
			return id - entry.id;
		}
	}
}
